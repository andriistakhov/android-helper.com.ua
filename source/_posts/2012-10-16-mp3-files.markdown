---
author: andrew
comments: true
date: 2012-10-16 09:56:15+00:00
layout: post
slug: '%d0%ba%d0%b0%d0%ba-%d1%80%d0%b0%d0%b1%d0%be%d1%82%d0%b0%d1%82%d1%8c-%d1%81-mp3-%d1%84%d0%b0%d0%b9%d0%bb%d0%b0%d0%bc%d0%b8'
title: Как работать с mp3-файлами
wordpress_id: 801
categories:
- Android для начинающих
- Android для профессионалов
- Программирование
---

Нашел довольно интересную статью по работе с mp3 файлами на стороне android.





Думаю это будет интересно как для профи так и для новичка.





Прошу к прочтению.


<!-- more -->


В данной статье описан процесс получения всей основной информации о аудиотреках в устройстве с Android, основы работы с плейлистами и проигрывания аудиофайлов.





**Общие принципы работы с провайдерами данных**





Источники данных ( Content Providers, Провайдеры данных ) в Android предоставляют интерфейс общего доступа к любому источнику данных путем отделения уровня доступа к данным от уровня приложения. Источники данных предлагают стандартный API, с помощью которого приложения могут обмениваться своими данными между собой, и использовать различные системные базы данных.





Типичный запрос к провайдеру данных выглядит следующим образом. Сначала запрашивается системный объект класса ContentResolver, который позволяет подключаться к провайдерам данных. Затем необходимо настроить параметры запроса и вызвать метод ContentResolver.query, в который передаются параметры запроса и который в случае успешного выполнения возвращает объект класса Cursor, предоставляющий интерфейс для работы с данными, возвращаемые в результате запроса к базе данных.




    
    
    
    [java]String[] projection = new String[] {
    
    People._ID,
    
    People.NAME,
    
    People.NUMBER,
    
    };
    
    
    
    Uri mContactsUri = People.CONTENT_URI;
    
    ContentResolver resolver = appContext.getContentResolver();
    
    
    
    Cursor managedCursor = resolver.query( mContactsUri,
    
              projection,.
    
              null, 
    
              null,
    
              People.NAME + " ASC"); 
    
    
    
    for( int i=0;i&lt;managedCursor.getCount();i++)
    
    {
    
          managedCursor.moveToPosition(i);
    
          String nameOfContact =  managedCursor.getString(1);
    
          ….    
    
    }
    
    [/java]
    
    





Подробнее о работе с провайдерами данных можно посмотреть на сайте разработчиков -[http://developer.android.com/guide/topics/providers/content-providers.html](http://developer.android.com/guide/topics/providers/content-providers.html).





**Провайдер данных MediaStore.Audio**





Провайдер данных MediaStore представляет собой централизованную базу данных мультимедиа, размещенных в памяти устройства или на сменном носителе ( SD карте ), включая аудио-, видеофайлы и изображения. Данные в MediaStore записываются автоматически при сканировании системой внутренней или сменной памяти, при этом рассылаются сообщения ACTION_MEDIA_SCANNER_STARTED и ACTION_MEDIA_SCANNER_FINISHED. Любая программа может уведомить сканер о наличии нового файла вызовом




    
    
    
    [java]sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, newFilePath));[/java]





Примечание: чтобы запретить сканеру обрабатывать определенный каталог на диске, поместите туда пустой файл с именем .nomedia.





При сканировании анализируются ID теги и другая информация, которая становится доступна в пользовательских приложениях. Доступ к данным аудиофайлов осуществляется через провайдер MediaStore.Audio, который также дает возможность работать с плейлистами ( списками воспроизведения ). 





В примерах этой статьи будет использоваться вызов myquery, который утилизирует получение курсора по URI провайдера данных и других параметров запроса.




    
    [java]public static Cursor myquery(Context context, Uri uri, String[] projection,
    
                 String selection, String[] selectionArgs, String sortOrder, int limit) {
    
                 try {
    
                       ContentResolver resolver = context.getContentResolver();
    
                       if (resolver == null) {
    
                            return null;
    
                       }
    
                        if (limit &gt; 0) {
    
                            uri = uri.buildUpon().appendQueryParameter("limit", "" + limit).build();
    
                         }
    
                      return resolver.query(uri, projection, selection, selectionArgs, sortOrder);
    
                    } catch (UnsupportedOperationException ex) {
    
                                return null;
    
                     }
    
                 
    
                  }[/java]





**Простое перечисление всей музыки в телефоне**




    
    [java]String[] projection = { MediaStore.Audio.Media._ID,             // 0
    
                              MediaStore.Audio.Media.ARTIST,          // 1
    
                              MediaStore.Audio.Media.TITLE,           // 2
    
                              MediaStore.Audio.Media.ALBUM_ID,  // 3
    
                              MediaStore.Audio.Media.ALBUM,           // 4
    
                              MediaStore.Audio.Media.DATA,            // 5
    
                              MediaStore.Audio.Media.DISPLAY_NAME,    // 6
    
                              MediaStore.Audio.Media.DURATION,
    
                                            MediaStore.Audio.Media.TITLE_KEY
    
            };      // 7
    
    
    
    String selection = MediaStore.Audio.Media.IS_MUSIC + " != 0 ";
    
    Cursor musicListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
    
                               projection, selection , null, null,0);
    
    Cursor musicListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Media.INTERNAL_CONTENT_URI,
    
                               projection, selection , null, null,0);
    
    [/java]





**Списки альбомов**





Получение списка альбомов:




    
    [java]String[] projection = {
    
                 MediaStore.Audio.Albums.ALBUM,            // 0
    
                 MediaStore.Audio.Albums.NUMBER_OF_SONGS,  // 1
    
                 MediaStore.Audio.Albums.LAST_YEAR,       // 2
    
                               MediaStore.Audio.Albums.ARTIST,           // 3
    
                               MediaStore.Audio.Albums._ID               // 4
    
                                            };
    
    
    
    
    
      Cursor albumsListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Albums.EXTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    
    
      Cursor albumsListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Albums.INTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    [/java]





Получение списка дорожек, входящих в данный альбом:




    
    [java]// String albumId содержит выбранный MediaStore.Audio.Albums._ID  
    
    
    
    String[] projection = { MediaStore.Audio.Media._ID,             // 0
    
                              MediaStore.Audio.Media.ARTIST,          // 1
    
                              MediaStore.Audio.Media.TITLE,           // 2
    
                              MediaStore.Audio.Media.ALBUM_ID,  // 3
    
                              MediaStore.Audio.Media.ALBUM,           // 4
    
                              MediaStore.Audio.Media.DATA,            // 5
    
                              MediaStore.Audio.Media.DISPLAY_NAME,    // 6
    
                              MediaStore.Audio.Media.DURATION,
    
                                            MediaStore.Audio.Media.TITLE_KEY
    
            };      // 7
    
    
    
           String selection = MediaStore.Audio.Media.IS_MUSIC + " != 0 AND "+
    
                   MediaStore.Audio.Media.ALBUM_ID +"=?";
    
           String[] args = new String[] {albumId};
    
    
    
    Cursor musicListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
    
                               projection, selection , args, null,0);
    
    Cursor musicListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Media.INTERNAL_CONTENT_URI,
    
                               projection, selection , args, null,0);
    
    [/java]





**Списки исполнителей**





Получение списка всех исполнителей:




    
    [java]String[] projection = {
    
                MediaStore.Audio.Artists.ARTIST,            // 0
    
                MediaStore.Audio.Artists.NUMBER_OF_ALBUMS,  // 1
    
                MediaStore.Audio.Artists.NUMBER_OF_TRACKS,
    
                              MediaStore.Audio.Artists._ID
    
                                            };
    
    
    
    
    
      Cursor artistListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Artists.EXTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    
    
      Cursor artistListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Artists.INTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    [/java]





Получение списка композиций данного исполнителя:




    
    [java]// String artistId содержит выбранный MediaStore.Audio.Artists._ID  
    
    String[] projection = {
    
                  String[] projection = { MediaStore.Audio.Media._ID,             // 0
    
                              MediaStore.Audio.Media.ARTIST,          // 1
    
                              MediaStore.Audio.Media.TITLE,           // 2
    
                              MediaStore.Audio.Media.ALBUM_ID,  // 3
    
                              MediaStore.Audio.Media.ALBUM,           // 4
    
                              MediaStore.Audio.Media.DATA,            // 5
    
                              MediaStore.Audio.Media.DISPLAY_NAME,    // 6
    
                              MediaStore.Audio.Media.DURATION,
    
                                            MediaStore.Audio.Media.TITLE_KEY
    
            };      // 7
    
    
    
           String selection = MediaStore.Audio.Media.IS_MUSIC + " != 0 AND "+
    
                   MediaStore.Audio.Media.ARTIST_ID +"=?";
    
           String[] args = new String[] {artistId};
    
    
    
          Cursor musicListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Artists.EXTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    
    
          Cursor musicListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Artists.INTERNAL_CONTENT_URI,
    
                               projection, null , null, null,0);
    
    [/java]





**Списки жанров**





Получение списка всех жанров:




    
    [java]String[] projection = { MediaStore.Audio.Genres._ID,          // 0
    
                  MediaStore.Audio.Genres.NAME          // 1
    
                                                        };
    
        Cursor genresListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Genres.EXTERNAL_CONTENT_URI,
    
                               projection, null , null, MediaStore.Audio.Genres.NAME, 0);
    
    
    
        Cursor genresListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Genres.INTERNAL_CONTENT_URI,
    
                               projection, null , null, MediaStore.Audio.Genres.NAME, 0);[/java]





Получение списка композиций выбранного жанра:




    
    [java]// String genreId содержит выбранный MediaStore.Audio.Genres._ID
    
     String[] projection = { MediaStore.Audio.Genres.Members._ID,             // 0
    
                              MediaStore.Audio.Genres.Members.ARTIST,          // 1
    
                              MediaStore.Audio.Genres.Members.TITLE,           // 2
    
                              MediaStore.Audio.Genres.Members.ALBUM_ID,  // 3
    
                              MediaStore.Audio.Genres.Members.ALBUM,           // 4
    
                              MediaStore.Audio.Genres.Members.DATA,            // 5
    
                              MediaStore.Audio.Genres.Members.DISPLAY_NAME,    // 6
    
                              MediaStore.Audio.Genres.Members.DURATION,
    
                                            MediaStore.Audio.Media.TITLE_KEY
    
                       };      // 7
    
    
    
            String selection = MediaStore.Audio.Genres.Members.IS_MUSIC + " != 0";
    
    
    
      Cursor musicListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Genres.Members.getContentUri("external", Long.valueOf(s)),
    
                               projection, selection , null, null,0);
    
    
    
      Cursor musicListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Genres.Members.getContentUri("internal", Long.valueOf(s)),
    
                               projection, selection , null, null,0);
    
    
    
    [/java]





**Работа с плейлистами**





Получение списка всех плейлистов в устройстве:




    
    [java]String[] projection = { MediaStore.Audio.Playlists._ID,             // 0
    
                                 MediaStore.Audio.Playlists.NAME          // 1
    
                                                        };
    
    
    
                    
    
    
    
    Cursor playListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,
    
                               projection, null , null, MediaStore.Audio.Playlists.NAME,0);
    
    
    
    Cursor playListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Playlists.INTERNAL_CONTENT_URI,
    
                               projection, null , null, MediaStore.Audio.Playlists.NAME,0);[/java]





Создание нового плейлиста:




    
    [java]ContentValues cv = new ContentValues();
    
    cv.put(MediaStore.Audio.Playlists.NAME, "Новый плейлист");
    
    Uri uri = getContentResolver().insert(MediaStore.Audio.Playlists.getContentUri("external"), cv);[/java]





Добавление композиции в плейлист:




    
    [java]// long playlistId - MediaStore.Audio.Playlists._ID выбранного плейлиста
    
    // int audioId - MediaStore.Audio.Media._ID композиции
    
            ContentResolver resolver = getContentResolver();
    
            String[] cols = new String[] {
    
                    "count(*)"
    
            };
    
            Uri uri = MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId);
    
            Cursor cur = resolver.query(uri, cols, null, null, null);
    
            cur.moveToFirst();
    
            final int base = cur.getInt(0);
    
            cur.close();
    
            ContentValues values = new ContentValues();
    
            values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, Integer.valueOf(base + 1));
    
            values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID, audioId);
    
            resolver.insert(uri, values);[/java]





Перечисление всех композиций плейлиста:




    
    [java]// String playlistId - MediaStore.Audio.Playlists._ID выбранного плейлиста
    
    
    
    String[] projection = {         MediaStore.Audio.Media._ID,             // 0
    
                              MediaStore.Audio.Media.ARTIST,          // 1
    
                              MediaStore.Audio.Media.TITLE,           // 2
    
                              MediaStore.Audio.Media.ALBUM_ID,  // 3
    
                              MediaStore.Audio.Media.ALBUM,           // 4
    
                              MediaStore.Audio.Media.DATA,            // 5
    
                              MediaStore.Audio.Media.DISPLAY_NAME,    // 6
    
                              MediaStore.Audio.Media.DURATION,
    
                                            MediaStore.Audio.Media.TITLE_KEY
    
            };     
    
    
    
           
    
     Cursor musicListSDCardCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Playlists.Members.getContentUri("external", Long.valueOf(playlistId)),
    
                               projection, null , null, null,0);
    
    
    
      Cursor musicListInternalMemoryCursor = myquery(
    
                               this,
    
                               MediaStore.Audio.Playlists.Members.getContentUri("internal", Long.valueOf(playlistId)),
    
                               projection, null , null, null,0);
    
    [/java]





**Проигрывание аудиотрека**





Чтобы открыть mp3 файл в одном из плееров, установленных в системе, можно использовать Intents таким образом:




    
    [java]Intent it = new Intent(Intent.ACTION_VIEW);
    
     Uri uri = Uri.parse( "file:///sdcard/mymusic/happysong.mp3");
    
     it.setDataAndType(uri, "audio/mp3");
    
     startActivity(it);[/java]





Для проигрывания mp3 файлов из приложения можно использовать объект класса MediaPlayer. Класс MediaPlayer из Android SDK работает на основе модели автомата состояний ( конечного автомата, state machine ) и используется для воспроизведения аудио и видео роликов. 





После создания объекта класса MediaPlayer устанавливается путь к файлу аудиоролика на диске и вызывается метод MediaPlayer.prepare(), который инициализирует MediaPlayer и приводит его в состояние готовности к воспроизведению аудиофайла. 





После успешной инициализации MediaPlayer приложение может вызывать его методы start(), stop() и pause() для управления воспроизведением. 




    
    [java]// Общий пример воспроизведения mp3 с использованием класса MediaPlayer
    
    
    
         MediaPlayer mediaPlayer = new  MediaPlayer();
    
    
    
         
    
        try {
    
              mediaPlayer.setDataSource("/sdcard/mytracks/happysong.mp3");
    
              mediaPlayer.prepare();
    
              mediaPlayer.start();
    
    
    
            } catch (IllegalArgumentException iae) {
    
                  // TODO Auto-generated catch block
    
                  iae.printStackTrace();
    
     
    
            } catch (IllegalStateException ise) {
    
                 // TODO Auto-generated catch block
    
                 ise.printStackTrace();
    
    
    
            } catch (IOException ioe) {
    
                 // TODO Auto-generated catch block
    
                 ioe.printStackTrace();
    
            } catch (Exception e) {
    
                 // TODO Auto-generated catch block
    
                 e.printStackTrace();
    
            }
    
    
    
    [/java]





Подробнее об использовании класса MediaPlayer можно посмотреть на сайте разработчиков [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html).





**Пример - проигрывание случайной дорожки**





Программа открывает в проигрывателе случайно выбранный mp3 файл.




    
    [java]package org.me.androidrandomplay;
    
    
    
    import android.app.Activity;
    
    import android.os.Bundle;
    
    import android.content.*;
    
    import android.database.Cursor;
    
    import android.net.Uri;
    
    import  android.provider.MediaStore;
    
    import android.widget.Toast;
    
    
    
    public class AndroidRandomPlay extends Activity {
    
    
    
        /** Called when the activity is first created. */
    
        @Override
    
        public void onCreate(Bundle icicle) {
    
            super.onCreate(icicle);
    
    
    
    
    
            String[] projection = { 
    
                                    MediaStore.Audio.Media._ID,
    
                                    MediaStore.Audio.Media.DATA
    
                                  };  
    
    
    
            String selection = MediaStore.Audio.Media.IS_MUSIC + " != 0 ";
    
            Cursor musicListSDCardCursor = myquery(
    
                                       this,
    
                                       MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
    
                                       projection, selection , null, null,0);
    
            Cursor musicListInternalMemoryCursor = myquery(
    
                                       this,
    
                                       MediaStore.Audio.Media.INTERNAL_CONTENT_URI,
    
                                       projection, selection , null, null,0);
    
    
    
            java.util.Vector&lt;String&gt; paths = new java.util.Vector();
    
    
    
            if( musicListSDCardCursor!= null )
    
            {
    
                for(int i=0;i&lt;musicListSDCardCursor.getCount();i++)
    
                {
    
                    musicListSDCardCursor.moveToPosition(i);
    
                    String p = musicListSDCardCursor.getString(1);
    
                    if(p.endsWith("mp3"))
    
                            paths.addElement(p);
    
    
    
                }
    
                musicListSDCardCursor.close();
    
            }
    
    
    
             if( musicListInternalMemoryCursor!= null )
    
            {
    
                for(int i=0;i&lt;musicListInternalMemoryCursor.getCount();i++)
    
                {
    
                    musicListInternalMemoryCursor.moveToPosition(i);
    
                    String p = musicListInternalMemoryCursor.getString(1);
    
                    if(p.endsWith("mp3"))
    
                            paths.addElement(p);
    
    
    
                }
    
                musicListInternalMemoryCursor.close();
    
            }
    
    
    
            if( paths.isEmpty() ) 
    
            {
    
                Toast.makeText( this, "no media found", Toast.LENGTH_LONG).show();   
    
                return;
    
            }
    
    
    
            java.util.Random r = new  java.util.Random();
    
            int pos = r.nextInt(paths.size()-1);
    
            if( paths.size() == 1 ) pos = 0;
    
    
    
            String url  = paths.elementAt(pos);
    
    
    
            if( url.length() == 0 ) return;
    
    
    
            Toast.makeText( this, url, Toast.LENGTH_LONG).show();
    
    
    
            try{
    
    
    
                Intent it = new Intent(Intent.ACTION_VIEW);
    
                Uri uri = Uri.parse( "file://"+url);
    
                it.setDataAndType(uri, "audio/mp3");
    
                startActivity(it);
    
          
    
            }catch (Exception e)
    
            {
    
                Toast.makeText( this, e.toString(), Toast.LENGTH_LONG).show();
    
            }
    
        }
    
    
    
        public static Cursor myquery(Context context, Uri uri, String[] projection,
    
                 String selection, String[] selectionArgs, String sortOrder, int limit) {
    
                 try {
    
                       ContentResolver resolver = context.getContentResolver();
    
                       if (resolver == null) {
    
                            return null;
    
                       }
    
                        if (limit &gt; 0) {
    
                            uri = uri.buildUpon().appendQueryParameter("limit", "" + limit).build();
    
                         }
    
                      return resolver.query(uri, projection, selection, selectionArgs, sortOrder);
    
                    } catch (UnsupportedOperationException ex) {
    
                                return null;
    
                     }
    
                  }
    
    
    
    }[/java]
